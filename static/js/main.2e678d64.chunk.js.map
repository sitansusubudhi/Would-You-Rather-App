{"version":3,"sources":["utils/_DATA.js","utils/api.js","actions/questions.js","actions/users.js","actions/shared.js","components/Question.js","components/UnansweredQs.js","components/AnsweredQs.js","components/Dashboard.js","actions/authedUser.js","components/Login.js","components/NavMenu.js","components/ResultPage.js","components/NoMatchPage.js","components/QuestionPage.js","components/Leaderboard.js","components/NewPoll.js","components/App.js","reducers/index.js","reducers/authedUser.js","reducers/users.js","reducers/questions.js","middleware/logger.js","middleware/index.js","index.js"],"names":["users","sarahedo","id","name","avatarURL","answers","questions","tylermcginnis","johndoe","sksubudhi","author","timestamp","optionOne","votes","text","optionTwo","_getUsers","Promise","res","rej","setTimeout","_getQuestions","_saveQuestion","question","authedUser","formattedQuestion","optionOneText","optionTwoText","Math","random","toString","substring","Date","now","formatQuestion","concat","saveQuestionAnswer","info","qid","answer","_saveQuestionAnswer","handleAddQuestion","dispatch","showLoading","then","type","addQuestion","addUserQuestion","hideLoading","handleSetQuestionAnswer","setUserAnswer","catch","e","console","warn","alert","handleInitialData","all","receiveUsers","receiveQuestions","Question","handleClick","preventDefault","props","history","push","this","user","Segment","Group","Header","as","Item","divided","Image","src","Content","verticalAlign","Description","answered","Extra","Button","color","floated","onClick","Icon","Label","Component","withRouter","connect","UnansweredQs","unansweredQuestions","className","map","key","AnsweredQs","answeredQuestions","Dashboard","to","Object","keys","filter","indexOf","answeredQuestionsSorted","panes","menuItem","render","Tab","Pane","menu","fluid","pointing","vertical","tabular","sort","a","b","setAuthedUser","Login","state","value","handleChange","setState","handleSubmit","userOptions","userID","image","avatar","Grid","textAlign","style","height","Column","maxWidth","Message","size","Form","onSubmit","Field","Dropdown","placeholder","selection","onChange","options","disabled","NavMenu","handleAuthUserLogout","inverted","Menu","secondary","NavLink","exact","position","UserOptionLabel","attached","ResultPage","optionOneVotes","optionOnePercent","optionTwoVotes","optionTwoPercent","totalVotes","userAnswer","Card","centered","stackable","Progress","percent","progress","loggedInUser","length","toFixed","NoMatchPage","handlePageNoMatch","icon","Subheader","QuestionPage","optionOneActive","optionTwoActive","handleClickOptionOne","prevState","handleClickOptionTwo","handleResult","result","Divider","section","toggle","active","Or","match","params","question_id","Leaderboard","leaders","ranks","leader","index","Table","celled","Row","HeaderCell","Body","Cell","tag","answersLength","questionsLength","totalScore","noOfQues","noOfAns","x","y","slice","NewPoll","optionOneValue","optionTwoValue","toHome","target","header","circular","widths","Input","inline","label","trim","App","userNotLogged","loading","path","component","combineReducers","action","loadingBar","loadingBarReducer","logger","store","next","group","log","getState","groupEnd","applyMiddleware","thunk","createStore","reducer","middleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2e678d64.chunk.js","sourcesContent":["let users = {\r\n  sarahedo: {\r\n    id: 'sarahedo',\r\n    name: 'Sarah Edo',\r\n    avatarURL: './images/IMG_1031_LinkedIn.jpg',\r\n    answers: {\r\n      \"8xf0y6ziyjabvozdd253nd\": 'optionOne',\r\n      \"6ni6ok3ym7mf1p33lnez\": 'optionTwo',\r\n      \"am8ehyc8byjqgar0jgpub9\": 'optionTwo',\r\n      \"loxhs1bqm25b708cmbf3g\": 'optionTwo'\r\n    },\r\n    questions: ['8xf0y6ziyjabvozdd253nd', 'am8ehyc8byjqgar0jgpub9']\r\n  },\r\n  tylermcginnis: {\r\n    id: 'tylermcginnis',\r\n    name: 'Tyler McGinnis',\r\n    avatarURL: './images/tyler.jpg', \r\n    answers: {\r\n      \"vthrdm985a262al8qx3do\": 'optionOne',\r\n      \"xj352vofupe1dqz9emx13r\": 'optionTwo',\r\n    },\r\n    questions: ['loxhs1bqm25b708cmbf3g', 'vthrdm985a262al8qx3do'],\r\n  },\r\n  johndoe: {\r\n    id: 'johndoe',\r\n    name: 'John Doe',\r\n    avatarURL: './images/20171230_170339_account.jpg',\r\n    answers: {\r\n      \"xj352vofupe1dqz9emx13r\": 'optionOne',\r\n      \"vthrdm985a262al8qx3do\": 'optionTwo',\r\n      \"6ni6ok3ym7mf1p33lnez\": 'optionTwo'\r\n    },\r\n    questions: ['6ni6ok3ym7mf1p33lnez', 'xj352vofupe1dqz9emx13r'],\r\n  },\r\n  sksubudhi: {\r\n    id: 'sksubudhi',\r\n    name: 'Sitansu Subudhi',\r\n    avatarURL: './images/rhaul-v-alva-jCM48W7y6Y8-unsplash.jpg',\r\n    answers: {\r\n      \"8xf0y6ziyjabvozdd253nd\": 'optionOne',\r\n      \"ab567vofupe1dqz9emx13r\": 'optionTwo',\r\n      \"6ni6ok3ym7mf1p33lnez\": 'optionTwo',\r\n      \"am8ehyc8byjqgar0jgpub9\": 'optionOne',\r\n    },\r\n    questions: ['ab567vofupe1dqz9emx13r'],\r\n  }\r\n};\r\n\r\nlet questions = {\r\n  \"8xf0y6ziyjabvozdd253nd\": {\r\n    id: '8xf0y6ziyjabvozdd253nd',\r\n    author: 'sarahedo',\r\n    timestamp: 1467166872634,\r\n    optionOne: {\r\n      votes: ['sarahedo'],\r\n      text: 'have horrible short term memory',\r\n    },\r\n    optionTwo: {\r\n      votes: [],\r\n      text: 'have horrible long term memory'\r\n    }\r\n  },\r\n  \"6ni6ok3ym7mf1p33lnez\": {\r\n    id: '6ni6ok3ym7mf1p33lnez',\r\n    author: 'johndoe',\r\n    timestamp: 1468479767190,\r\n    optionOne: {\r\n      votes: [],\r\n      text: 'become a superhero',\r\n    },\r\n    optionTwo: {\r\n      votes: ['johndoe', 'sarahedo', 'sksubudhi'],\r\n      text: 'become a supervillain'\r\n    }\r\n  },\r\n  \"am8ehyc8byjqgar0jgpub9\": {\r\n    id: 'am8ehyc8byjqgar0jgpub9',\r\n    author: 'sarahedo',\r\n    timestamp: 1488579767190,\r\n    optionOne: {\r\n      votes: ['sksubudhi'],\r\n      text: 'be telekinetic',\r\n    },\r\n    optionTwo: {\r\n      votes: ['sarahedo'],\r\n      text: 'be telepathic'\r\n    }\r\n  },\r\n  \"loxhs1bqm25b708cmbf3g\": {\r\n    id: 'loxhs1bqm25b708cmbf3g',\r\n    author: 'tylermcginnis',\r\n    timestamp: 1482579767190,\r\n    optionOne: {\r\n      votes: [],\r\n      text: 'be a front-end developer',\r\n    },\r\n    optionTwo: {\r\n      votes: ['sarahedo'],\r\n      text: 'be a back-end developer'\r\n    }\r\n  },\r\n  \"vthrdm985a262al8qx3do\": {\r\n    id: 'vthrdm985a262al8qx3do',\r\n    author: 'tylermcginnis',\r\n    timestamp: 1489579767190,\r\n    optionOne: {\r\n      votes: ['tylermcginnis'],\r\n      text: 'find $50 yourself',\r\n    },\r\n    optionTwo: {\r\n      votes: ['johndoe'],\r\n      text: 'have your best friend find $500'\r\n    }\r\n  },\r\n  \"xj352vofupe1dqz9emx13r\": {\r\n    id: 'xj352vofupe1dqz9emx13r',\r\n    author: 'johndoe',\r\n    timestamp: 1493579767190,\r\n    optionOne: {\r\n      votes: ['johndoe'],\r\n      text: 'write JavaScript',\r\n    },\r\n    optionTwo: {\r\n      votes: ['tylermcginnis'],\r\n      text: 'write Swift'\r\n    }\r\n  },\r\n  \"ab567vofupe1dqz9emx13r\": {\r\n    id: 'ab567vofupe1dqz9emx13r',\r\n    author: 'sksubudhi',\r\n    timestamp: 1498799767190,\r\n    optionOne: {\r\n      votes: [],\r\n      text: 'create a new poll',\r\n    },\r\n    optionTwo: {\r\n      votes: ['sksubudhi'],\r\n      text: 'answer an existing one'\r\n    }\r\n  },\r\n};\r\n\r\nfunction generateUID () {\r\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n}\r\n\r\nexport function _getUsers () {\r\n  return new Promise((res, rej) => {\r\n    setTimeout(() => res({...users}), 1000);\r\n  })\r\n}\r\n\r\nexport function _getQuestions () {\r\n  return new Promise((res, rej) => {\r\n    setTimeout(() => res({...questions}), 1000);\r\n  })\r\n}\r\n\r\nfunction formatQuestion ({ optionOneText, optionTwoText, author }) {\r\n  return {\r\n    id: generateUID(),\r\n    timestamp: Date.now(),\r\n    author,\r\n    optionOne: {\r\n      votes: [],\r\n      text: optionOneText,\r\n    },\r\n    optionTwo: {\r\n      votes: [],\r\n      text: optionTwoText,\r\n    }\r\n  };\r\n}\r\n\r\nexport function _saveQuestion (question) {\r\n  return new Promise((res, rej) => {\r\n    const authedUser = question.author;\r\n    const formattedQuestion = formatQuestion(question);\r\n\r\n    setTimeout(() => {\r\n      questions = {\r\n        ...questions,\r\n        [formattedQuestion.id]: formattedQuestion\r\n      };\r\n      \r\n      users = {\r\n        ...users,\r\n        [authedUser]: {\r\n          ...users[authedUser],\r\n          questions: users[authedUser].questions.concat([formattedQuestion.id])\r\n        }\r\n      };\r\n\r\n      res(formattedQuestion);\r\n    }, 1000);\r\n  });\r\n}\r\n\r\nexport function _saveQuestionAnswer ({ authedUser, qid, answer }) {\r\n  return new Promise((res, rej) => {\r\n    setTimeout(() => {\r\n      users = {\r\n        ...users,\r\n        [authedUser]: {\r\n          ...users[authedUser],\r\n          answers: {\r\n            ...users[authedUser].answers,\r\n            [qid]: answer\r\n          }\r\n        }\r\n      };\r\n\r\n      questions = {\r\n        ...questions,\r\n        [qid]: {\r\n          ...questions[qid],\r\n          [answer]: {\r\n            ...questions[qid][answer],\r\n            votes: questions[qid][answer].votes.concat([authedUser])\r\n          }\r\n        }\r\n      };\r\n\r\n      res();\r\n    }, 500)\r\n  });\r\n}\r\n","import {\r\n  _getUsers,\r\n  _getQuestions,\r\n  _saveQuestion,\r\n  _saveQuestionAnswer,\r\n} from './_DATA';\r\n\r\nexport function getInitialData() {\r\n  return Promise.all([\r\n    _getUsers(),\r\n    _getQuestions(),\r\n  ]).then(([users, questions]) => ({\r\n    users,\r\n    questions,\r\n  }));\r\n}\r\n\r\n/**\r\n * Using getInitialData, we would be \r\n * getting the users and questions at \r\n * the mount of App component. \r\n * We won't need to call \r\n * getUsers and getQuestions separately. \r\n * In this way, we optimize by not creating \r\n * multiple API calls every time \r\n * Dashboard Component mounts.\r\n */\r\n\r\nexport function getUsers () {\r\n  return _getUsers();\r\n}\r\n\r\nexport function getQuestions () {\r\n  return _getQuestions();\r\n}\r\n\r\n\r\n\r\nexport function saveQuestion(info) {\r\n  return _saveQuestion(info);\r\n}\r\n\r\nexport function saveQuestionAnswer(info) {\r\n  return _saveQuestionAnswer(info);\r\n}","import { saveQuestion, saveQuestionAnswer } from '../utils/api';\r\nimport { showLoading, hideLoading } from 'react-redux-loading';\r\nimport { addUserQuestion, setUserAnswer } from '../actions/users';\r\n\r\nexport const RECEIVE_QUESTIONS = 'RECEIVE_QUESTIONS';\r\nexport const ADD_QUESTION = 'ADD_QUESTION';\r\nexport const SET_QUESTION_ANSWER = 'SET_QUESTION_ANSWER';\r\n\r\n\r\nexport function receiveQuestions(questions) {\r\n    return {\r\n        type: RECEIVE_QUESTIONS,\r\n        questions,\r\n    }\r\n};\r\n\r\nfunction addQuestion(question) {\r\n    return {\r\n        type: ADD_QUESTION,\r\n        question,\r\n    }\r\n}\r\n\r\nexport function handleAddQuestion({ author, optionOneText, optionTwoText }) {\r\n    return (dispatch) => {\r\n\r\n        dispatch(showLoading());\r\n\r\n        return saveQuestion({\r\n            author,\r\n            optionOneText,\r\n            optionTwoText\r\n        })\r\n        .then((question) => {\r\n            dispatch(addQuestion(question));\r\n            dispatch(addUserQuestion(question)); // dispatching addUserQuestion action creator to update question in users part of state as well\r\n        })\r\n        .then(() => dispatch(hideLoading()));\r\n    }\r\n};\r\n\r\nexport function setQuestionAnswer({authedUser, qid, answer}) {\r\n    return {\r\n        type: SET_QUESTION_ANSWER,\r\n        authedUser,\r\n        qid,\r\n        answer\r\n    }\r\n};\r\n\r\nexport function handleSetQuestionAnswer({authedUser, qid, answer}) {\r\n    return (dispatch) => {\r\n\r\n        dispatch(showLoading());\r\n        dispatch(setQuestionAnswer({authedUser, qid, answer}));\r\n        dispatch(setUserAnswer({authedUser, qid, answer})); // dispatching setUserAnswer action creator to set question's answer in users part of state as well\r\n\r\n        return saveQuestionAnswer({\r\n            authedUser,\r\n            qid,\r\n            answer\r\n        })\r\n        .catch((e) => {\r\n                console.warn('Error in handleSetQuestionAnswer: ', e);\r\n                alert('There was an error saving the answer. Try again.');\r\n        })\r\n        .then(() => dispatch(hideLoading()));\r\n    }\r\n};\r\n\r\n\r\n\r\n","export const RECEIVE_USERS = 'RECEIVE_USERS';\r\nexport const ADD_USER_QUESTION = 'ADD_USER_QUESTION';\r\nexport const SET_USER_ANSWER = 'SET_USER_ANSWER';\r\n\r\nexport function receiveUsers (users) {\r\n    return {\r\n        type: RECEIVE_USERS,\r\n        users,\r\n    }\r\n};\r\n\r\nexport function addUserQuestion({author, id}) {\r\n    return {\r\n        type: ADD_USER_QUESTION,\r\n        authedUser: author,\r\n        id,\r\n    }\r\n};\r\n\r\nexport function setUserAnswer({authedUser, qid, answer}) {\r\n    return {\r\n        type: SET_USER_ANSWER,\r\n        authedUser,\r\n        qid,\r\n        answer\r\n    }\r\n};","import { getInitialData } from '../utils/api';\r\nimport { receiveQuestions } from './questions';\r\nimport { receiveUsers } from './users';\r\nimport { showLoading, hideLoading } from 'react-redux-loading';\r\n\r\nexport function handleInitialData() {\r\n    return (dispatch) => {\r\n\r\n        dispatch(showLoading());\r\n\r\n        return getInitialData()\r\n            .then(({users, questions }) => {\r\n                dispatch(receiveUsers(users));\r\n                dispatch(receiveQuestions(questions));\r\n            })\r\n            .then(() => dispatch(hideLoading()));\r\n    }\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    Button,\r\n    Header,\r\n    Icon,\r\n    Item,\r\n    Label,\r\n    Segment\r\n} from 'semantic-ui-react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass Question extends Component {\r\n\r\n    /**\r\n     * @description Allow the user to go to QuestionPage or ResultPage view when \"View Poll\" or \"Show Poll Results\" clicked.\r\n     * @param {object} e - event object\r\n     */\r\n    handleClick = (e) => {\r\n        e.preventDefault();\r\n        // const { name } = e.target;\r\n        const { question: { id } } = this.props; // Destructure to obtain question passed as props, and store the id from question\r\n        \r\n        // history passed as props to current component by using withRouter higher-order component.\r\n        // The route provided would render either QuestionPage view or ResultPage view.\r\n        this.props.history.push(`/questions/${id}`);\r\n    };\r\n\r\n    render() {\r\n\r\n        const { user, question } = this.props; // Destructure to obtain user and question passed as props to this component\r\n        \r\n        // Text to show on List view if question doesn't exist. Such a situation hasn't occured yet.\r\n        if (question === null) {\r\n            return <p>This question doesn't exist</p>\r\n        }\r\n\r\n        const { id, optionOne } = question; // Destructure question variable to obtain id and optionOne text value\r\n        const { name, avatarURL } = user; // Destructure user to obtain name and avatarURL\r\n\r\n        return (\r\n            <Segment.Group>\r\n                <Segment>\r\n                    <Header as='h3'>\r\n                        {name} asks:\r\n                    </Header>\r\n                </Segment>\r\n                <Segment>\r\n                    <Item.Group divided>\r\n                        <Item>\r\n                            <Item.Image src={avatarURL} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header>Would you rather</Item.Header>\r\n                                <Item.Description>{optionOne.text} or ...</Item.Description>\r\n                                {/**\r\n                                 * If answered passed in as props is set to 'true', display 'Show Poll Results' button,\r\n                                 * else display 'View Poll' button.\r\n                                 */}\r\n                                {this.props.answered === true\r\n                                    ? (\r\n                                        <Item.Extra>\r\n                                            <Button \r\n                                                name='resultView'\r\n                                                color='green' \r\n                                                floated='right'\r\n                                                onClick={this.handleClick} >\r\n                                                Show Poll Results\r\n                                               <Icon name='right chevron' />\r\n                                            </Button>\r\n                                            <Label>{id}</Label>\r\n                                        </Item.Extra>\r\n                                    )\r\n                                    : (\r\n                                        <Item.Extra>\r\n                                            <Button \r\n                                                name='questionView'\r\n                                                color='black' \r\n                                                floated='right'\r\n                                                onClick={this.handleClick} >\r\n                                                View Poll\r\n                                            <Icon name='right chevron' />\r\n                                            </Button>\r\n                                            <Label>{id}</Label>\r\n                                        </Item.Extra>\r\n                                    )\r\n                                }\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment.Group>\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * @description Returns user(question's author), and question objects as props to the Question Component.\r\n * @param {object} state - the current state of the Redux store\r\n * @param {object} state.users - the state object is destructured to provide all the users present in the database.\r\n * @param {object} state.questions - the state object is destructured to provide all the questions present in the database.\r\n * @param {object} ownProps.id - the id of the question passed as props to the Question component.\r\n * @returns {object} object -  The plain JS object merged into component's props.\r\n * @returns {object} object.user - Return user object containing the details of the question's author obtained from the state\r\n * @returns {object} object.question - Return question object containing the details of the question obtained from the state\r\n */\r\nfunction mapStateToProps({ users, questions }, { id }) {\r\n    const question = questions[id];\r\n    const user = users[question.author];\r\n\r\n    return {\r\n        user,\r\n        question\r\n    };\r\n}\r\n\r\n\r\n// Connects the Question component to the Redux store.\r\n// withRouter passes the history props to the wrapped component Question.\r\nexport default withRouter(connect(mapStateToProps)(Question));","import React from 'react';\r\nimport Question from './Question';\r\n\r\nconst UnansweredQs = (props) => {\r\n    \r\n    const { unansweredQuestions } = props; // Destructuring to obtain unansweredQuestions passed as props\r\n    \r\n    return (\r\n        <div>\r\n          <ul className='dashboard-list'>\r\n            {/**\r\n             * unansweredQuestions contains array of question ids,\r\n             * which have not yet been answered by the logged in user.\r\n             * Hence we map over the array and render details \r\n             * for each answered question by passing an attribute of answered={false}. \r\n             */}\r\n            {unansweredQuestions.map((id) => (\r\n              <li key={id}>\r\n                  <Question id={id} answered={false} />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UnansweredQs;\r\n\r\n\r\n","import React from 'react';\r\nimport Question from './Question';\r\n\r\nconst AnsweredQs = (props) => {\r\n    \r\n    const { answeredQuestions } = props; // Destructuring to obtain answeredQuestions passed as props\r\n    return (\r\n        <div>\r\n          <ul className='dashboard-list'>\r\n            {/**\r\n             * answeredQuestions contains array of question ids,\r\n             * which have been answered by the logged in user.\r\n             * Hence we map over the array and render details \r\n             * for each answered question by passing an attribute of answered={true}. \r\n             */}\r\n            {answeredQuestions.map((id) => (\r\n              <li key={id}>\r\n                  <Question id={id} answered={true} />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default AnsweredQs;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport UnansweredQs from './UnansweredQs';\r\nimport AnsweredQs from './AnsweredQs';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Dashboard extends Component {\r\n  render() {\r\n    const { authedUser, users, questions } = this.props;  // Destructuring to obtain all variables passed as props\r\n   \r\n    // If authedUser is not set, redirect user to Login page.\r\n    if (!authedUser) {\r\n      return <Redirect to='/' />;\r\n    }\r\n    \r\n    const answeredQuestions = Object.keys(users[authedUser].answers);\r\n    // Sorted by most recently created\r\n    const unansweredQuestions = questions.filter(question => answeredQuestions.indexOf(question) === -1); \r\n    const answeredQuestionsSorted = questions.filter(question => unansweredQuestions.indexOf(question) === -1);\r\n\r\n    // Show the unansweredQuestions in Unanswered Questions Tab\r\n    // Show the answeredQuestionsSorted in Answered Questions Tab\r\n    const panes = [\r\n      { \r\n        menuItem: 'Unanswered Questions',\r\n        render: () => \r\n          <Tab.Pane>\r\n            <UnansweredQs unansweredQuestions={unansweredQuestions} />\r\n          </Tab.Pane> \r\n      },\r\n      { \r\n        menuItem: 'Answered Questions',\r\n        render: () => \r\n          <Tab.Pane>\r\n            <AnsweredQs answeredQuestions={answeredQuestionsSorted} />\r\n          </Tab.Pane>\r\n      }\r\n    ];\r\n\r\n    return (\r\n      <div>\r\n        {/**\r\n         * Populate the panes attribute of Tab Component with values obtained from props.\r\n         */}\r\n        <Tab\r\n          menu={{ \r\n            fluid: true,\r\n            pointing: true,\r\n            vertical: true,\r\n            tabular: true\r\n          }}\r\n          panes={panes}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\n/**\r\n * @description Returns authedUser, users and questions as props to the App Component.\r\n * @param {object} state - the current state of the Redux store\r\n * @param {string} state.authedUser - the state object is destructured to provide the 'authedUser'\r\n * @param {object} state.users - the state object is destructured to provide all the users present in the database.\r\n * @param {object} state.questions - the state object is destructured to provide all the questions present in the database.\r\n * @returns {object} object -  The plain JS object merged into component's props.\r\n * @returns {object} object.users - Return users object from the state\r\n * @returns {string[]} object.questions - Array of question ids sorted by most recently created.\r\n */\r\nfunction mapStateToProps({ authedUser, users, questions }) {\r\n\r\n  return {\r\n    authedUser,\r\n    users,\r\n    questions: Object.keys(questions)\r\n      .sort((a, b) => questions[b].timestamp - questions[a].timestamp)\r\n  };\r\n}\r\n\r\n// Connects the Dashboard component to the Redux store. \r\nexport default connect(mapStateToProps)(Dashboard);","export const SET_AUTHED_USER = 'SET_AUTHED_USER';\r\n\r\nexport function setAuthedUser (id) {\r\n    return {\r\n        type: SET_AUTHED_USER,\r\n        id,\r\n    }\r\n};","import React, { Component } from 'react';\r\nimport { \r\n    Dropdown,\r\n    Button,\r\n    Form,\r\n    Grid,\r\n    Header,\r\n    Message,\r\n    Segment\r\n} from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { connect } from 'react-redux';\r\nimport { setAuthedUser } from '../actions/authedUser';\r\n\r\nclass Login extends Component {\r\n     /**\r\n     * value - The select dropdown choice value\r\n     */\r\n    state = {\r\n        value: ''\r\n    };\r\n\r\n    /**\r\n     * @description Set the selected user from the dropdown by setState.\r\n     * @param {object} e - event object\r\n     * @param {string} object.value - Contains user id of the selected user\r\n     */\r\n    handleChange = (e, { value }) => {\r\n        this.setState(() => ({\r\n            value\r\n        }));\r\n    };\r\n\r\n    /**\r\n     * @description Allows user to login by dispatching setAuthedUser action creator.\r\n     * @param {object} e - event object\r\n     */\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const { value } = this.state; // Destructuring to obtain state value\r\n        const { dispatch } = this.props; // Destructuring to obtain dispatch function from props\r\n        dispatch(setAuthedUser(value));\r\n    };\r\n\r\n    render() {\r\n        const { users } = this.props; // Destructuring to obtain users passed as props\r\n        const userOptions = Object.keys(users).map(userID => {\r\n            const user = users[userID];\r\n            // For each userID, store the below attributes as an object element in userOptions array\r\n            return {\r\n                key: user.id,\r\n                text: user.name,\r\n                value: user.id,\r\n                image: {avatar: true, src: user.avatarURL}\r\n            };\r\n        });\r\n\r\n        const { value } = this.state; // Destructuring to obtain state value\r\n        return (\r\n            <Grid \r\n                textAlign='center' \r\n                style={{ height: '100vh' }} \r\n                verticalAlign='middle'>\r\n\r\n                <Grid.Column style={{ maxWidth: 500 }}>\r\n                    <Header \r\n                        as='h3' \r\n                        color='teal' \r\n                        textAlign='center'>\r\n                        <Message size='large'>\r\n                            Welcome to the Would You Rather App\r\n                        </Message>\r\n                    </Header>\r\n                    <Form size='large' onSubmit={this.handleSubmit}>\r\n                        <Segment >\r\n                            <Form.Field>\r\n                                {/**\r\n                                 * Use the userOptions array to populate the options for Dropdown component\r\n                                 */}\r\n                                <Dropdown\r\n                                    placeholder='Select user to log in'\r\n                                    fluid\r\n                                    selection\r\n                                    onChange={this.handleChange} \r\n                                    value={value}\r\n                                    options={userOptions} />\r\n                            </Form.Field>\r\n                            {/**\r\n                             * Button is disabled if no user is selected from dropdown.\r\n                             */}\r\n                            <Button \r\n                                color='black' \r\n                                fluid size='large'\r\n                                disabled={value === ''} >\r\n                                Login\r\n                            </Button>\r\n                        </Segment>\r\n                    </Form>\r\n                </Grid.Column>\r\n            </Grid>\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * @description Returns users as props to the Login Component. It uses the 'users' data of Redux store\r\n * @param {object} state - the current state of the Redux store\r\n * @param {object} state.users - the state object is destructured to provide all the users present in the database.\r\n * @returns {object} object - The plain JS object merged into component's props.\r\n * @returns {object} object.users - Return users object from the state\r\n */\r\nfunction mapStateToProps({ users }) {\r\n    return {\r\n        users\r\n    };\r\n}\r\n\r\n// Connects the Login component to the Redux store. Any time the store is updated, mapStateToProps will be called.\r\nexport default connect(mapStateToProps)(Login);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Image, Menu, Segment } from 'semantic-ui-react';\r\nimport { setAuthedUser } from '../actions/authedUser';\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\n\r\nclass NavMenu extends Component {\r\n   \r\n    /**\r\n     * @description Logs out the user by dispatching setAuthedUser(null) action creator. Redirects user to login page\r\n     * @param {object} e - event object\r\n     */\r\n    handleAuthUserLogout = e => {\r\n        e.preventDefault();\r\n        this.props.dispatch(setAuthedUser(null));\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    render() {\r\n        const { authedUser, users } = this.props; // Destructuring to obtain authedUser and users passed as props\r\n        \r\n        // If authedUser is not set to some truthy value, don't show this component and redirect user to login page\r\n        if (!authedUser) {\r\n            return <Redirect to='/' />;\r\n        }\r\n        \r\n        return (\r\n            <Fragment>\r\n                <Segment inverted>\r\n                    <Menu inverted pointing secondary>\r\n                        {/**\r\n                         * For Menu Option \"Home\", if clicked navigate to Dashboard view (user to be logged in)\r\n                         */}\r\n                        <Menu.Item\r\n                            name='home'\r\n                            as={NavLink} to=\"/\" exact />\r\n                        {/**\r\n                         * For Menu Option \"New Poll\", if clicked navigate to New Poll view which is at \"/add\" route\r\n                         */}\r\n                        <Menu.Item\r\n                            name='new poll'\r\n                            as={NavLink} to=\"/add\" />\r\n                        {/**\r\n                         * For Menu Option \"Leaderboard\", if clicked navigate to Leaderboard view present at \"/leaderboard\" route\r\n                         */}\r\n                        <Menu.Item\r\n                            name='leaderboard'\r\n                            as={NavLink} to=\"/leaderboard\" />\r\n\r\n                        {/**\r\n                         * Display Logged in user's name and avatar to the right side of Navigation Menu.\r\n                         */}\r\n                        <Menu.Menu position='right'>\r\n                            <Menu.Item>\r\n                                Hello, {users[authedUser].name}\r\n                            </Menu.Item>\r\n                            <Image src={users[authedUser].avatarURL} avatar />\r\n\r\n                            {/**\r\n                             * Allow user to logout if clicked on Logout menu item.\r\n                             */}\r\n                            <Menu.Item\r\n                                name='logout'\r\n                                onClick={this.handleAuthUserLogout} />\r\n                        </Menu.Menu>\r\n                    </Menu>\r\n                </Segment>\r\n            </Fragment>\r\n        )\r\n    }\r\n};\r\n\r\n/**\r\n * @description Returns authedUser and users from Redux store state\r\n * @param {object} state - the current state of the Redux store\r\n * @param {string} state.authedUser - the state object is destructured to provide the 'authedUser'\r\n * @param {object} state.users - the state object is destructured to provide all the users present in the database.\r\n * @returns {object} object -  The plain JS object merged into component's props.\r\n * @param {string} state.authedUser - Return authedUser value from the state\r\n * @returns {object} object.users - Return users object from the state\r\n */\r\nfunction mapStateToProps({ authedUser, users }) {\r\n\r\n    return {\r\n        authedUser,\r\n        users\r\n    };\r\n}\r\n\r\n// Connects the NavMenu component to the Redux store.\r\n// withRouter passes the history props to the wrapped component NavMenu.\r\nexport default withRouter(connect(mapStateToProps)(NavMenu));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    Card,\r\n    Header,\r\n    Item,\r\n    Label,\r\n    Progress,\r\n    Segment\r\n} from 'semantic-ui-react';\r\n\r\n// This component is used to show what is the current user's answer \r\nconst UserOptionLabel = () => (\r\n    <Label \r\n        as='a'\r\n        color='blue'\r\n        attached='bottom right'>\r\n        Your choice\r\n    </Label>\r\n);\r\n\r\nclass ResultPage extends Component {\r\n\r\n    render() {\r\n\r\n        const {\r\n            name,\r\n            avatar,\r\n            optionOne,\r\n            optionOneVotes,\r\n            optionOnePercent,\r\n            optionTwo,\r\n            optionTwoVotes,\r\n            optionTwoPercent,\r\n            totalVotes,\r\n            userAnswer\r\n        } = this.props; // Destructure props to obtain all variables\r\n\r\n        return (\r\n            <Segment.Group>\r\n                <Segment>\r\n                    <Header as='h3'>\r\n                        {name} asks:\r\n                    </Header>\r\n                </Segment>\r\n                <Segment>\r\n                    <Item.Group divided>\r\n                        <Item>\r\n                            <Item.Image src={avatar} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header>\r\n                                    Results:\r\n                                </Item.Header>\r\n                                <Item.Description>\r\n                                    <Card.Group centered stackable>\r\n                                        <Card fluid>\r\n                                            <Card.Content>\r\n                                                {/**\r\n                                                 * Show Option one text for the question id\r\n                                                 */}\r\n                                                <Card.Header textAlign='center'>\r\n                                                    Would you rather {optionOne} ?\r\n                                                </Card.Header>\r\n\r\n                                                <Segment>\r\n                                                    {/**\r\n                                                     * If current user's answer is optionOne, show UserOptionLabel on optionOne\r\n                                                     */}\r\n                                                    {userAnswer === 'optionOne' && <UserOptionLabel />}\r\n                                                    {/**\r\n                                                     * Display Percentage of votes who selected optionOne\r\n                                                     */}\r\n                                                    <Progress \r\n                                                        percent={optionOnePercent} \r\n                                                        color='green' \r\n                                                        progress>\r\n                                                        {optionOneVotes} out of {totalVotes} votes\r\n                                                    </Progress>\r\n                                                </Segment>\r\n                                            </Card.Content>\r\n                                        </Card>\r\n                                        <Card fluid>\r\n                                            <Card.Content>\r\n                                                {/**\r\n                                                 * Show Option two text for the question id\r\n                                                 */}\r\n                                                <Card.Header textAlign='center'>\r\n                                                    Would you rather {optionTwo} ?\r\n                                                </Card.Header>\r\n                                                <Segment>\r\n                                                    {/**\r\n                                                     * If current user's answer is optionTwo, show UserOptionLabel on optionTwo\r\n                                                     */}\r\n                                                    {userAnswer === 'optionTwo' && <UserOptionLabel />}\r\n                                                    {/**\r\n                                                     * Display Percentage of votes who selected optionTwo\r\n                                                     */}\r\n                                                    <Progress \r\n                                                        percent={optionTwoPercent}\r\n                                                        color='green'\r\n                                                        progress>\r\n                                                        {optionTwoVotes} out of {totalVotes} votes\r\n                                                    </Progress>\r\n                                                </Segment>\r\n                                            </Card.Content>\r\n                                        </Card>\r\n                                    </Card.Group>\r\n                                </Item.Description>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment.Group>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * @description Returns name, avatar, optionOne, optionTwo, optionOneVotes, optionOnePercent, optionTwoVotes, optionTwoPercent, totalVotes, and userAnswer as props to the App Component.\r\n * @param {object} state - the current state of the Redux store\r\n * @param {string} state.authedUser - the state object is destructured to provide the 'authedUser'\r\n * @param {object} state.users - the state object is destructured to provide all the users present in the database.\r\n * @param {object} state.questions - the state object is destructured to provide all the questions present in the database.\r\n * @param {object} ownProps.id - the id of the question passed as props to the ResultPage component.\r\n * @returns {object} object -  The plain JS object merged into component's props.\r\n * @returns {string} object.name - Return question's author name\r\n * @returns {string} object.avatar - Return question's author avatar\r\n * @returns {string} object.optionOne - Return question's optionOne text\r\n * @returns {number} object.optionOneVotes - Return question's optionOne votes\r\n * @returns {number} object.optionOnePercent - Return question's optionOne vote percent\r\n * @returns {string} object.optionTwo - Return question's optionTwo text\r\n * @returns {number} object.optionTwoVotes - Return question's optionTwo votes\r\n * @returns {number} object.optionTwoPercent - Return question's optionTwo vote percent\r\n * @returns {number} object.totalVotes - Return question's totalVotes (optionOneVotes + optionTwoVotes)\r\n * @returns {string} object.userAnswer - Return loggedInUser's answer for the question id passed as props\r\n */\r\nfunction mapStateToProps({ authedUser, users, questions }, { id }) {\r\n\r\n    const loggedInUser = users[authedUser];\r\n    const question = questions[id];\r\n    const optionOneVotes = question.optionOne.votes.length;\r\n    const optionTwoVotes = question.optionTwo.votes.length;\r\n    const totalVotes = optionOneVotes + optionTwoVotes;\r\n    const optionOnePercent = ((100 * optionOneVotes) / totalVotes).toFixed(1);\r\n    const author = users[question.author];\r\n\r\n    return {\r\n        name: author.name,\r\n        avatar: author.avatarURL,\r\n        optionOne: question.optionOne.text,\r\n        optionOneVotes,\r\n        optionOnePercent,\r\n        optionTwo: question.optionTwo.text,\r\n        optionTwoVotes,\r\n        optionTwoPercent: (100 - optionOnePercent),\r\n        totalVotes,\r\n        userAnswer: loggedInUser.answers[id]\r\n    };\r\n}\r\n\r\n// Connects the ResultPage component to the Redux store.\r\nexport default connect(mapStateToProps)(ResultPage);","import React, { Component } from 'react';\r\nimport { \r\n    Header,\r\n    Icon,\r\n    Segment,\r\n    Button\r\n} from 'semantic-ui-react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass NoMatchPage extends Component {\r\n\r\n    /**\r\n     * @description Allow the user to go to Dashboard view.\r\n     * @param {object} e - event object\r\n     */\r\n    handlePageNoMatch = e => {\r\n        e.preventDefault();\r\n        // history passed as props to current component by using withRouter higher-order component\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Segment placeholder>\r\n                <Header as='h2' icon>\r\n                    <Icon name='settings' />\r\n                    404 - Not Found\r\n                    <Header.Subheader>\r\n                        The page link seems to be broken. Click below to go to Home.\r\n                    </Header.Subheader>\r\n                </Header>\r\n                {/**\r\n                 * Allow user to go to Dashboard View on click of the Go Home button\r\n                 */}\r\n                <Button\r\n                    color='black'\r\n                    onClick={this.handlePageNoMatch}>\r\n                    Go Home\r\n                </Button>\r\n            </Segment>\r\n        );\r\n    }\r\n};\r\n\r\n// withRouter passes the history props to the wrapped component NoMatchPage.\r\nexport default withRouter(NoMatchPage);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    Button,\r\n    Divider,\r\n    Header,\r\n    Icon,\r\n    Item,\r\n    Segment\r\n} from 'semantic-ui-react';\r\nimport ResultPage from './ResultPage';\r\nimport NoMatchPage from './NoMatchPage';\r\nimport { handleSetQuestionAnswer } from '../actions/questions';\r\n\r\nclass QuestionPage extends Component {\r\n    /**\r\n     * optionOneActive - boolean value indicating if Option one is selected\r\n     * optionTwoActive - boolean value indicating if Option two is selected\r\n     */\r\n    state = {\r\n        optionOneActive: false,\r\n        optionTwoActive: false\r\n    };\r\n\r\n    /**\r\n     * @description Toggles the button for option one. If option one is active, option two is inactive\r\n     */\r\n    handleClickOptionOne = () => {\r\n        this.setState((prevState) => ({\r\n            optionOneActive: prevState.optionOneActive ? false : true,\r\n            optionTwoActive: prevState.optionTwoActive ? false : false\r\n        }))\r\n    };\r\n\r\n    /**\r\n     * @description Toggles the button for option two. If option two is active, option one is inactive\r\n     */\r\n    handleClickOptionTwo = () => {\r\n        this.setState((prevState) => ({\r\n            optionOneActive: prevState.optionOneActive ? false : false,\r\n            optionTwoActive: prevState.optionTwoActive ? false : true\r\n        }))\r\n    };\r\n\r\n     /**\r\n     * @description Saves the question's answer to the database with required results.\r\n     * @param {object} e - event object\r\n     */\r\n    handleResult = (e) => {\r\n        e.preventDefault();\r\n        const { optionOneActive, optionTwoActive } = this.state; // Destructuring to obtain optionOneActive and optionTwoActive from state\r\n        const { question, loggedInUser, dispatch } = this.props; // Destructuring to obtain all variables received as props\r\n\r\n        let result;\r\n        // Set result variable\r\n        if (optionOneActive) {\r\n            result = 'optionOne';\r\n        } else if (optionTwoActive) {\r\n            result = 'optionTwo';\r\n        } else {\r\n            result = '';\r\n        }\r\n\r\n        // Allows user to save Question's answer by dispatching handleSetQuestionAnswer action creator.\r\n        if (result) {\r\n            dispatch(handleSetQuestionAnswer({\r\n                authedUser: loggedInUser.id,\r\n                qid: question.id,\r\n                answer: result\r\n            }));\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        const { optionOneActive, optionTwoActive } = this.state; // Destructuring to obtain optionOneActive and optionTwoActive from state\r\n        const { user, question, loggedInUser } = this.props; // Destructuring to obtain all variables received as props\r\n        \r\n        // If question received as props is null, then show the NoMatchPage component (404 - Not Found page)\r\n        if (question === null) {\r\n            return <NoMatchPage />;\r\n        }\r\n\r\n        const { id, optionOne, optionTwo } = question; // Destructuring the question variable to obtain id, optionOne and optionTwo text\r\n        const { name, avatarURL } = user; // Destructure user to obtain name and avatarURL\r\n\r\n        // If the user has Submitted the answer for the Question, display the ResultPage for the same question id\r\n        if (id in loggedInUser.answers) {\r\n            return <ResultPage id={id} />;\r\n        }\r\n\r\n        return (\r\n            <Segment.Group>\r\n                <Segment>\r\n                    <Header as='h3'>\r\n                        {name} asks:\r\n                    </Header>\r\n                </Segment>\r\n                <Segment>\r\n                    <Item.Group divided>\r\n                        <Item>\r\n                            <Item.Image src={avatarURL} />\r\n\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Segment textAlign='center'>\r\n                                    <Header as='h3'>\r\n                                        Would you rather .. \r\n                                    </Header>\r\n\r\n                                    <Divider section />\r\n                                    <Button.Group size='large'>\r\n                                        <Button \r\n                                            toggle\r\n                                            active={optionOneActive}\r\n                                            onClick={this.handleClickOptionOne}>\r\n                                                {optionOne.text}\r\n                                        </Button>\r\n                                        <Button.Or />\r\n                                        <Button\r\n                                            toggle\r\n                                            active={optionTwoActive}\r\n                                            onClick={this.handleClickOptionTwo}>\r\n                                                {optionTwo.text}\r\n                                        </Button>\r\n                                    </Button.Group>\r\n                                </Segment>\r\n                                <Item.Extra>\r\n                                    {/**\r\n                                     * If none of the options is selected, disable the Submit button\r\n                                     */}\r\n                                    <Button \r\n                                        disabled={!optionOneActive && !optionTwoActive} \r\n                                        color='black' \r\n                                        floated='right'\r\n                                        onClick={this.handleResult}>\r\n                                        Submit\r\n                                        <Icon name='right chevron' />\r\n                                    </Button>\r\n                                </Item.Extra>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment.Group>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * @description Returns user(question's author), question, and loggedInUser objects as props to the QuestionPage Component.\r\n * @param {object} state - the current state of the Redux store\r\n * @param {string} state.authedUser - the state object is destructured to provide the 'authedUser'\r\n * @param {object} state.users - the state object is destructured to provide all the users present in the database.\r\n * @param {object} state.questions - the state object is destructured to provide all the questions present in the database.\r\n * @param {object} props - props passed to the Question component.\r\n * @returns {object} object -  The plain JS object merged into component's props.\r\n * @returns {object} object.user - Return user object containing the details of the question's author obtained from the state\r\n * @returns {object} object.question - Return question object containing the details of the question obtained from the state\r\n * @returns {object} object.loggedInUser - Return loggedInUser object containing the details of the logged in user obtained from the state\r\n */\r\nfunction mapStateToProps({ authedUser, users, questions }, props) {\r\n\r\n    // Retrieve the id from the current route \"/questions/:question_id\"\r\n    const id = props.match.params.question_id;\r\n    const loggedInUser = users[authedUser];\r\n\r\n    // If the id matched is not present in any of the questions, return \"null\" for user and question properties.\r\n    if (!(id in questions)) {\r\n        return {\r\n            user: null,\r\n            question: null,\r\n            loggedInUser\r\n        }\r\n    }\r\n\r\n    const question = questions[id];\r\n    const user = users[question.author];\r\n    \r\n\r\n    return {\r\n        user,\r\n        question,\r\n        loggedInUser\r\n    };\r\n}\r\n\r\n// Connects the QuestionPage component to the Redux store.\r\nexport default connect(mapStateToProps)(QuestionPage);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    Item,\r\n    Label,\r\n    Segment,\r\n    Table\r\n} from 'semantic-ui-react';\r\n\r\nclass Leaderboard extends Component {\r\n\r\n    render() {\r\n\r\n        const { leaders } = this.props; // Destructuring to obtain leaders passed as props\r\n\r\n        // Ranks array of length 3, where each element is an array of length 2\r\n        // 1st index of the element indicates rank, 2nd index indicates color\r\n        const ranks = [\r\n            ['1st', 'yellow'],\r\n            ['2nd', 'grey'],\r\n            ['3rd', 'orange']\r\n          ];\r\n          \r\n        return (\r\n            <Segment>\r\n                <Item.Group divided>\r\n                     {/**\r\n                     * leaders contains array of top 3 users.\r\n                     * Hence we map over the array and render details for each user. \r\n                     * This includes Polls created, Questions answered, and total score.\r\n                     */}\r\n                    {leaders.map((leader, index) => (\r\n                        <Item key={leader.id}>\r\n                        <Item.Image src={leader.avatar} />\r\n                        \r\n                        <Item.Content verticalAlign='middle'>\r\n                        <Item.Header>\r\n                            {leader.name}\r\n                        </Item.Header>\r\n                                <Table celled>\r\n                                    <Table.Header>\r\n                                        <Table.Row>\r\n                                            <Table.HeaderCell>Rank</Table.HeaderCell>\r\n                                            <Table.HeaderCell>Questions answered</Table.HeaderCell>\r\n                                            <Table.HeaderCell>Polls created</Table.HeaderCell>\r\n                                            <Table.HeaderCell>Score</Table.HeaderCell>\r\n                                        </Table.Row>\r\n                                    </Table.Header>\r\n\r\n                                    <Table.Body>\r\n                                        <Table.Row>\r\n                                            <Table.Cell>\r\n                                                <Label color={ranks[index][1]} tag>\r\n                                                    {ranks[index][0]}\r\n                                                </Label>\r\n                                            </Table.Cell>\r\n                                            <Table.Cell>{leader.answersLength}</Table.Cell>\r\n                                            <Table.Cell>{leader.questionsLength}</Table.Cell>\r\n                                            <Table.Cell>{leader.totalScore}</Table.Cell>\r\n                                        </Table.Row>\r\n                                    </Table.Body>\r\n                                </Table>\r\n                        </Item.Content>\r\n                    </Item>\r\n                    ))}\r\n                </Item.Group>\r\n            </Segment>\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * @description Returns the top 3 ranked users based on the total score (Polls created + Polls answered)\r\n * @param {object} state - the current state of the Redux store\r\n * @param {object} state.users - the state object is destructured to provide all the users present in the database.\r\n * @returns {object} object -  The plain JS object merged into component's props.\r\n * @returns {object[]} object.leaders - Array of length 3. It contains top 3 ranked users.\r\n */\r\nfunction mapStateToProps({ users }) {\r\n\r\n    const leaders = Object.keys(users).map(userID => {\r\n        const user = users[userID];\r\n        const noOfQues = user.questions.length;\r\n        const noOfAns = Object.keys(user.answers).length;\r\n\r\n        // For each user, create an element with below attributes and store in leaders.\r\n        return {\r\n            id: user.id,\r\n            name: user.name,\r\n            avatar: user.avatarURL,\r\n            questionsLength: noOfQues,\r\n            answersLength: noOfAns,\r\n            totalScore: noOfQues + noOfAns\r\n        }\r\n    });\r\n\r\n    // Sort the array based on totalScore and return only top 3 users\r\n    return {\r\n        leaders: leaders.sort((x, y) => (y.totalScore - x.totalScore)).slice(0, 3)\r\n    };\r\n}\r\n\r\n// Connects the Leaderboard component to the Redux store. \r\nexport default connect(mapStateToProps)(Leaderboard);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    Form,\r\n    Header,\r\n    Icon,\r\n    Message,\r\n    Segment,\r\n} from 'semantic-ui-react';\r\nimport { handleAddQuestion } from '../actions/questions';\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass NewPoll extends Component {\r\n     /**\r\n     * optionOneValue - The text value from Option one input\r\n     * optionTwoValue - The text value from Option two input\r\n     * toHome - Boolean value (Initial value - false). If true, Redirect user to show Dashboard view\r\n     */\r\n    state = {\r\n        optionOneValue: '',\r\n        optionTwoValue: '',\r\n        toHome: false,\r\n    };\r\n\r\n    /**\r\n     * @description Set the text value for any change of text in Option one input or Option two input.\r\n     * @param {object} e - event object\r\n     * @param {string} object.value - Contains text of the selected option input\r\n     */\r\n    handleChange = (e, { value }) => {\r\n        const { name } = e.target;\r\n        this.setState(() => ({\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    /**\r\n     * @description Saves the question with option values to the database. Sets toHome to true to show Dashboard view.\r\n     * @param {object} e - event object\r\n     */\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { authedUser, dispatch } = this.props;\r\n        const { optionOneValue, optionTwoValue } = this.state;\r\n\r\n        // Allows user to save Question by dispatching handleAddQuestion action creator.\r\n        dispatch(handleAddQuestion({\r\n            author: authedUser,\r\n            optionOneText: optionOneValue,\r\n            optionTwoText: optionTwoValue\r\n        }));\r\n        // Update toHome property in state\r\n        this.setState((prevState) => ({\r\n            ...prevState,\r\n            toHome: true,\r\n        }));\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        const { optionOneValue, optionTwoValue, toHome } = this.state; // Destructuring to obtain variables from state\r\n\r\n        // if toHome is set, redirect user to Dashboard view\r\n        if (toHome === true) {\r\n            return <Redirect to='/' />;\r\n        }\r\n        return (\r\n            <Segment attached>\r\n                <Message\r\n                    header='Create a new poll'\r\n                    size='large'/>\r\n                <Message info>\r\n                    <p>Fill out the form below to create a new poll</p>\r\n                </Message>\r\n\r\n                <Form className='fluid segment' onSubmit={this.handleSubmit}>\r\n                    <Header as='h2' icon textAlign='center'>\r\n                        <Icon name='question' circular />\r\n                        <Header.Content>\r\n                            Would you rather\r\n                        </Header.Content>\r\n                    </Header>\r\n                    <Form.Group widths='equal'>\r\n                        <Form.Input\r\n                            name='optionOneValue'\r\n                            fluid\r\n                            inline\r\n                            label='Set option one'\r\n                            className='center'\r\n                            placeholder='Enter option one text here'\r\n                            onChange={this.handleChange}\r\n                            value={optionOneValue} />\r\n                        <Form.Input\r\n                            name='optionTwoValue'\r\n                            fluid\r\n                            inline\r\n                            label='Set option two'\r\n                            className='center'\r\n                            placeholder='Enter option two text here'\r\n                            onChange={this.handleChange}\r\n                            value={optionTwoValue} />\r\n                    </Form.Group>\r\n                    {/**\r\n                     * The button will be disabled if any one of the options is blank or contains only spaces.\r\n                     */}\r\n                    <Form.Button\r\n                        fluid\r\n                        color='black'\r\n                        disabled={optionOneValue.trim() === '' || optionTwoValue.trim() === ''}>\r\n                        Submit\r\n                    </Form.Button>\r\n                </Form>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * @description Returns authedUser part of state from Redux store\r\n * @param {object} state - the current state of the Redux store\r\n * @param {string} state.authedUser - the state object is destructured to provide the 'authedUser'\r\n * @returns {object} object -  The plain JS object merged into component's props.\r\n * @param {string} state.authedUser - Return authedUser value from the state\r\n */\r\nfunction mapStateToProps({ authedUser }) {\r\n\r\n    return {\r\n        authedUser,\r\n    };\r\n}\r\n\r\n// Connects the NewPoll component to the Redux store.\r\nexport default connect(mapStateToProps)(NewPoll);","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { handleInitialData } from '../actions/shared';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Dashboard from './Dashboard';\nimport Login from './Login';\nimport NavMenu from './NavMenu';\nimport QuestionPage from './QuestionPage';\nimport Leaderboard from './Leaderboard';\nimport NewPoll from './NewPoll';\nimport NoMatchPage from './NoMatchPage';\nimport LoadingBar from 'react-redux-loading';\n\nclass App extends Component {\n  // Use props.dispatch (received by connected component) to dispatch action for fetching initial data\n  componentDidMount() {\n    this.props.dispatch(handleInitialData());\n  }\n\n  render() {\n    return (\n      <Router>\n        <Fragment>\n           {/**\n           * Display Loading bar while fetching initial data\n           */}\n          <LoadingBar />\n          <div className='container'>\n            {/* Display Login page if the user is not logged in */}\n            {this.props.userNotLogged === true\n              ? <Login /> \n              : this.props.loading === true\n                ? null\n                : <div>\n                    <NavMenu />\n                    {/**\n                     * Allow React router to render components based on URL paths.\n                     * If no path gets matched, then the NoMatchPage component gets displayed.\n                     */}\n                    <Switch>\n                      <Route path=\"/\" exact>\n                        <Dashboard />\n                      </Route>\n                      <Route path='/questions/:question_id' component={QuestionPage} />\n                      <Route path=\"/add\">\n                        <NewPoll />\n                      </Route>\n                      <Route path=\"/leaderboard\">\n                        <Leaderboard />\n                      </Route>\n                      <Route>\n                        <NoMatchPage />\n                      </Route>\n                    </Switch>\n                  </div>}\n            </div>\n        </Fragment>\n      </Router>\n    )\n  }\n};\n\n/**\n * @description Returns userNotLogged as props to the App Component. It uses the 'authedUser' part of state to check if user is logged in.\n * @param {object} state - the current state of the Redux store\n * @param {string} state.authedUser - the state object is destructured to provide the 'authedUser'\n * @returns {object} object - The plain JS object merged into component's props.\n * @returns {boolean} object.userNotLogged - return true if the user is logged in and false if not\n */\nfunction mapStateToProps({ authedUser }) {\n  return {\n    // Check if authedUser is null\n    userNotLogged: authedUser === null\n  };\n}\n\n// Connects the App component to the Redux store. Any time the store is updated, mapStateToProps will be called.\nexport default connect(mapStateToProps)(App);","import { combineReducers } from 'redux';\r\nimport authedUser from './authedUser';\r\nimport questions from './questions';\r\nimport users from './users';\r\nimport { loadingBarReducer } from 'react-redux-loading';\r\n\r\nexport default combineReducers({\r\n    authedUser,\r\n    users,\r\n    questions,\r\n    loadingBar: loadingBarReducer,\r\n});","import { SET_AUTHED_USER } from '../actions/authedUser';\r\n\r\nexport default function authedUser (state = null, action) {\r\n    switch(action.type) {\r\n        case SET_AUTHED_USER: \r\n            return action.id;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { RECEIVE_USERS, ADD_USER_QUESTION, SET_USER_ANSWER } from '../actions/users';\r\n\r\nexport default function users (state = {}, action) {\r\n    switch(action.type) {\r\n        case RECEIVE_USERS: \r\n            return {\r\n                ...state,\r\n                ...action.users\r\n            };\r\n\r\n        case ADD_USER_QUESTION:\r\n            const { authedUser, id } = action;\r\n\r\n            return {\r\n                ...state,\r\n                [authedUser]: {\r\n                  ...state[authedUser],\r\n                  questions: state[authedUser].questions.concat([id])\r\n                }\r\n            };\r\n\r\n        case SET_USER_ANSWER:\r\n            const { authedUser: loggedInUser, qid, answer } = action;\r\n            \r\n            return {\r\n                ...state,\r\n                [loggedInUser]: {\r\n                  ...state[loggedInUser],\r\n                  answers: {\r\n                    ...state[loggedInUser].answers,\r\n                    [qid]: answer\r\n                  }\r\n                }\r\n            };\r\n\r\n        default: \r\n            return state\r\n    }\r\n};","import { RECEIVE_QUESTIONS, ADD_QUESTION, SET_QUESTION_ANSWER } from '../actions/questions';\r\n\r\nexport default function questions (state = {}, action) {\r\n    switch(action.type) {\r\n        case RECEIVE_QUESTIONS: \r\n            return {\r\n                ...state,\r\n                ...action.questions\r\n            };\r\n\r\n        case ADD_QUESTION:\r\n            const { question } = action;\r\n            const { id } = question;\r\n\r\n            return {\r\n                ...state,\r\n                [id]: question\r\n            };\r\n        \r\n        case SET_QUESTION_ANSWER:\r\n            const { authedUser, qid, answer } = action;\r\n            return {\r\n                ...state,\r\n                [qid]: {\r\n                  ...state[qid],\r\n                  [answer]: {\r\n                    ...state[qid][answer],\r\n                    votes: state[qid][answer].votes.concat([authedUser])\r\n                  }\r\n                }\r\n            };\r\n\r\n        default: \r\n            return state;\r\n    }\r\n};","const logger = (store) => (next) => (action) => {\r\n    console.group(action.type);\r\n    console.log('The action: ', action);\r\n    const result = next(action);\r\n    console.log('The new state: ', store.getState());\r\n    console.groupEnd();\r\n    return result;\r\n};\r\n\r\nexport default logger;","import logger from './logger';\r\nimport thunk from 'redux-thunk';\r\nimport { applyMiddleware } from 'redux';\r\n\r\nexport default applyMiddleware(\r\n    thunk,\r\n    logger\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers';\nimport middleware from './middleware';\n\n\nconst store = createStore(reducer, middleware);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root'));"],"sourceRoot":""}